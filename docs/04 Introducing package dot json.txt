package.json
	The package.json file is kind of a manifest for your project.
	It can do a lot of things, completely unrelated.
	It�s a central repository of configuration for tools, for example.
	It�s also where npm (and yarn) store the names and versions of the package it installed.

The file structure:
	{
	}
	It�s empty!
	There are no fixed requirements of what should be in a package.json file, for an application.
	The only requirement is that it respects the JSON format,
	otherwise it cannot be read by programs that try to access its properties programmatically.

	If you�re building a Node.js package that you want to distribute over npm things change radically,
	and you must have a set of properties that will help other people use it.

Properties breakdown: For more info https://flaviocopes.com/package-json/#the-file-structure

	name :		sets the application/package <214 characters, must not have spaces, it can only contain lowercase letters, hyphens (-) or underscores (_).
	author :	e.g "author": "Flavio Copes <flavio@flaviocopes.com> (https://flaviocopes.com)" or
			"author": {
    			  "name": "Flavio Copes",
   			 "email": "flavio@flaviocopes.com",
   			 "url": "https://flaviocopes.com"
  			}
	contributors :This property is an array that lists them.
			e.g "contributors": [
    				"Flavio Copes <flavio@flaviocopes.com> (https://flaviocopes.com)"
  			     ] or
			"contributors": [
    			      {
      				"name": "Flavio Copes",
      				"email": "flavio@flaviocopes.com",
      				"url": "https://flaviocopes.com"
    			      }
  			]
	bugs :Links to the package issue tracker, most likely a GitHub issues page

	homepage
	version	:indicates the current version & is always expressed with 3 numbers
			x.x.x. where major (breaking changes).minor (backward-compatible changes).patch (bug fix changes)

	license

	keywords

	description 	:is a brief description of the app/package

	repository 	:specifies where this package repository is located. e.g
			implicit set the version control system using repo prefix:
			"repository": "github:flaviocopes/testing" or "repository": "bitbucket:flaviocopes/testing" or
			explicitly set the version control system:
			"repository": {
  			    "type": "git",
  			    url": "https://github.com/flaviocopes/testing.git"
			}

	main :set the entry point for the application. When you import this package in an application, that�s where the application will search for the module exports.
		e.g "main": "src/main.js"

	private :if set to true prevents the app/package to be accidentally published on npm

	scripts :defines a set of node scripts you can run. e.g
		"scripts": {
		  "dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js",
		  "start": "npm run dev",
		  "unit": "jest --config test/unit/jest.conf.js --coverage",
		  "test": "npm run unit",
		  "lint": "eslint --ext .js,.vue src test/unit",
		  "build": "node build/build.js"
		}
		You can run them by calling npm run XXXX or yarn XXXX, where XXXX is the command name.
		You can use any name you want for a command, and scripts can do literally anything you want

	dependencies 	:sets a list of npm packages installed as dependencies
			npm install <PACKAGENAME> Or yarn add <PACKAGENAME> adds it to this list
			or for npm < v5.0.0. npm install <PACKAGENAME> --save

	devDependencies :sets a list of npm packages installed as development dependencies
			meant to be installed only on a development machine, not needed to run the code in production.
			Usage of the `--dev` option is deprecated. Use `--only=dev` instead.
			or for npm < v5.0.0. npm install --save-dev mocha




	engines :sets which versions of Node this package/app works on
		"engines": {
		  "node": ">= 6.0.0",
		  "npm": ">= 3.0.0",
		  "yarn": "^0.13.0"
		}

	browserslist :is used to tell which browsers (and their versions) you want to support
			 It�s referenced by Babel, Autoprefixer, and other tools, to only add the polyfills and fallbacks needed to the browsers you target.
			"browserslist": [
			  "> 1%",
			  "last 2 versions",
			  "not ie <= 8"
			]
	Command-specific properties : command-specific configuration, for example for Babel, ESLint, and more.
			Each has a specific property, like eslintConfig, babel and others.
			Those are command-specific, and you can find how to use those in the respective command/project documentation.


	All those properties are used by either npm or other tools that we can use.
